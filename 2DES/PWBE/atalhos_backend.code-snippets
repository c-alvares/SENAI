{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Console Log" : {
		"scope": "javascript,typescript",
		"prefix": "log",
		"body": [
			"console.log(`${$1}`);"
		],
		"description": "Criação de um console log"
	},
	"Arrow Function": {
		"scope": "javascript,typescript",
		"prefix": "arrow",
		"body": [
			"const $1 = ($2, $3) => {",
			"\tconsole.log(`${2}`);",
			"};",
		],
		"description": "Criar uma Arrow Function"
	},
	"Fetch": {
		"scope": "javascript,typescript",
		"prefix": "!fetch",
		"body": [
			"var options ={",
			"\t'method':'$1',",
			"\t'headers':{",
			"\t\t'Content-Type':'application/json'",
			"\t},",
			"\t'body':JSON.stringify($2)",
			"}",
			"fetch($3, options)",
			".then(resp => { return resp.json() })",
			".then(data => { console.log(data); });"
		],
		"description": "Criar o fetch rapidin"
	},
	"Controller CRUD": {
		"scope": "javascript,typescript",
		"prefix": "!crud",
		"body": [
			"const $1 = require('../models/');",
			"const con = require('../DAO/')",
			"",
			"const create = (req, res) => {",
			"\tcon.query($1.$2(req.body), (err, result) => {",
			"\t\tif (err == null)",
			"\t\t\tres.json('Cadastrado com Sucesso').status(201).end();",
			"\t\telse",
			"\t\t\tif (err.sqlState == 23000)",
			"\t\t\t\tres.status(406).json(err).end();",
			"\t\t\telse",
			"\t\t\t\tres.status(500).json(err).end();",
			"\t});",
			"}",
			"",
			"const readAll = (req, res) => {",
			"\tcon.query($1.$3(), (err, result) => {",
			"\t\tif (err == null)",
			"\t\t\tres.json(result).end();",
			"\t\telse",
			"\t\t\tres.status(500).end()",
			"\t});",
			"}",
			"",
			"const readOne = (req, res) => {",
			"\tcon.query($1.$4(req.params), (err, result) => {",
			"\t\tif (err == null)",
			"\t\t\tif (result.length > 0)",
			"\t\t\t\tres.json(result).end();",
			"\t\t\telse",
			"\t\t\t\tres.status(404).end()",
			"\t\telse",
			"\t\t\tres.status(500).end()",
			"\t});",
			"}",
			"",
			"const updateItem = (req, res) => {",
			"\tcon.query($1.$6(req.body), (err, result) => {",
			"\t\tif (err == null)",
			"\t\t\tif (result.affectedRows > 0)",
			"\t\t\t\tres.status(200).end();",
			"\t\t\telse",
			"\t\t\t\tres.status(404).end();",
			"\t\telse",
			"\t\t\tres.status(500).end();",
			"\t});",
			"}",
			"",
			"const deleteItem = (req, res) => {",
			"\tcon.query($1.$7(req.params), (err, result) => {",
			"\t\tif (err == null)",
			"\t\t\tif (result.affectedRows > 0)",
			"\t\t\t\tres.json('Deletado com Sucesso').status(204).end();",
			"\t\t\telse",
			"\t\t\t\tres.json('Não encontrado').status(404).end();",
			"\t\telse",
			"\t\t\tres.status(400).end();",
			"\t});",
			"}",
			"",
			"module.exports = {",
			"\tcreate,",
			"\treadAll,",
			"\treadOne,",
			"\tupdateItem,",
			"\tdeleteItem",
			"}"
		],
		"description": "Cria o CRUD completo"
	},
	"DAO" : {
		"scope": "javascript,typescript",
		"prefix": "!dao",
		"body": [
			"const mysql = require('mysql');",
			"",
			"const con = mysql.createConnection({",
			"\tuser: 'root',",
			"\thost: 'localhost',",
			"\tdatabase: '$1',",
			"});",
			"",
			"module.exports = con;"
		],
		"description": "Criação do Data Acess Object para comunicação com o banco de dados"
	},
}